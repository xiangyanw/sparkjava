stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Building container image ..."
    - ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
    - docker buildx create --name multi-arch --use
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
    - docker buildx build --platform linux/amd64,linux/arm64 --tag ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sparkjava:${CI_COMMIT_SHORT_SHA} --push .
    - echo "Build complete."
  tags:
    - codebuild-sparkjava-$CI_PROJECT_ID-$CI_PIPELINE_IID-$CI_JOB_NAME

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
    - aws eks update-kubeconfig --name gitlab-demo --region ${AWS_REGION}
    - |
        kubectl set image deployment/java-app \
        java-app=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sparkjava:${CI_COMMIT_SHORT_SHA} \
        -n default
    - sleep 20
    - kubectl rollout status deployment/java-app -n default
    - kubectl get pods -l app=java-app -n default
    - echo "Application successfully deployed."
  tags:
    - codebuild-sparkjava-$CI_PROJECT_ID-$CI_PIPELINE_IID-$CI_JOB_NAME
